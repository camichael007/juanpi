--


pxe kickstart

cobbler


软件包路径   笔记目录/cobbler_soft/
cobbler-2.6.3-1.el6.noarch.rpm      koan-2.6.9-1.el6.noarch.rpm
cobbler-2.6.9.tar.gz                libyaml-0.1.4-2.3.x86_64.rpm
cobbler-web-2.6.3-1.el6.noarch.rpm  PyYAML-3.10-3.1.el6.x86_64.rpm
Django14-1.4.20-1.el6.noarch.rpm




第一大步:安装cobbler
软件包有两个
cobbler-2.6.3-1.el6.noarch.rpm
cobbler-web-2.6.3-1.el6.noarch.rpm

--------------------------------------------------------
关于cobbler的这两个软件包从哪里下载
1，从官网下载,但一般为源码包，安装起来麻烦，容易出错
2，使用第三方的yum源（如epel，Extra Packages for Enterprise Linux。还有RpmForge,RpmFusion，Remi，网易163等等。）
我这里就是在epel上下载的

方法一：
路径为
https://dl.fedoraproject.org/pub/epel/6Server/x86_64/   --直接在这个路径使用ctrl+F，再输入关键字搜索就可以了

方法二：
直接把epel的所有软件包做成公网的yum源
做法为直接下载下面的rpm包（不同时期，版本可能会有差异，因为有人维护，会不断更新）
https://dl.fedoraproject.org/pub/epel/6Server/x86_64/epel-release-6-8.noarch.rpm 
下载下来之后，直接安装这个rpm包，那么会在你的本机的/etc/yum.repos.d/目录下产生几个.repo结尾的yum配置文件，路径全部指向公网，直接就可以使用了


方法三：
如果你的网速不是很好，你可以把上面所有的软件都下载到本地，然后路径全改为本地路径就可以了

如何下载
# yum repolist	--列出你所有的软件仓库

使用reposync命令

当然cobbler也有修改源码相关的命令 cobbler repo edit


--------------------------------------------------------
# rpm -ivh cobbler-2.6.3-1.el6.noarch.rpm
warning: cobbler-2.6.3-1.el6.noarch.rpm: Header V3 RSA/SHA256 Signature, key ID 0608b895: NOKEY
error: Failed dependencies:
	mod_wsgi is needed by cobbler-2.6.3-1.el6.noarch
	python-cheetah is needed by cobbler-2.6.3-1.el6.noarch
	PyYAML is needed by cobbler-2.6.3-1.el6.noarch
--这里的依赖性最后的PyYAML在rhel6.5的iso里不是自带的,所以要先手动上网下载并安装;上面两个依赖性在rhel6.5的iso里就有，所以可以直接使用yum来安装


PyYAML这个依赖性的rpm包在rhel6.5的iso里没有，epel源里没有，163源没有,centos源等等都没有，它的官方网站没有rpm包.可以尝试去www.rpmfind.net或rpm.pbone.net网站下载



解决的安装顺序如下:
# rpm -ivh libyaml-0.1.4-2.3.x86_64.rpm	
# rpm -ivh PyYAML-3.10-3.1.el6.x86_64.rpm
# yum install cobbler-2.6.3-1.el6.noarch.rpm


# rpm -ivh cobbler-web-2.6.3-1.el6.noarch.rpm 
warning: cobbler-web-2.6.3-1.el6.noarch.rpm: Header V3 RSA/SHA256 Signature, key ID 0608b895: NOKEY
error: Failed dependencies:
	Django is needed by cobbler-web-2.6.3-1.el6.noarch
	mod_ssl is needed by cobbler-web-2.6.3-1.el6.noarch
--第一个依赖包也是第三方的，第二个是rhel6.5的iso里自带的



解决的安装顺序如下:
# rpm -ivh Django14-1.4.20-1.el6.noarch.rpm
# yum install cobbler-web-2.6.3-1.el6.noarch.rpm 



安装完cobbler，把下面这些组件服务也安装上
＃yum install  tftp* rsync xinetd httpd syslinux dhcp* pykickstart


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

第二大步:基本配置

# cobbler check		--查看cobbler潜在的需要修改的选项(有可能因为你的httpd启不来，而选成无法显示下面的结果；按报错去解决它）
The following are potential configuration items that you may want to fix:

1 : The 'server' field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.
2 : For PXE to be functional, the 'next_server' field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.
3 : some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.
4 : since iptables may be running, ensure 69, 80/443, and 25151 are unblocked
5 : debmirror package is not installed, it will be required to manage debian deployments and repositories
6 : The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to 'cobbler' and should be changed, try: "openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'" to generate new one
7 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them


Restart cobblerd and then run 'cobbler sync' to apply changes.

--说明：上面我这里是有7个需求（不同的机器和环境可能会不一样，按照它的说明去解决就可以了）


解决需求1，需求2，需求6:
# openssl passwd -1 -salt 'werwqerwqr' '123456'		--123456为密码(这是自动安装客户端系统成功后的root登录密码）,werwqerwqr为干扰码（随便写）
$1$werwqerw$.prcfrYFbwuvkD8XspayN.

# vim /etc/cobbler/settings
384 server: 1.1.1.1	--换成cobbler服务器端的IP（这里我还是使用vmnet1这个虚拟的hostonly网络来做的，所以这里还是我宿主机上vmnet1的IP）
272 next_server: 1.1.1.1	--同上
101 default_password_crypted: "$1$werwqerw$.prcfrYFbwuvkD8XspayN."  --把密码字符串换成你上面产生的字符串


# /etc/init.d/cobblerd restart	--修改后重启
	

解决需求4：
cobbler检测到你的iptables是开启状态，它需要iptables不要禁止69，80，443，25151端口就可以了。你也可以关闭iptables

iptables -F
iptables -t nat -F
/etc/init.d/iptables stop
chkconfig iptables off


解决需求7
# yum install fence-agents


解决了上面的问题后，再次cobbler check
# cobbler check	    --解决了上面的问题，只余下两个问题了（问题１可以使用cobbler get-loaders解决，但需要有外网和外网的yum源；问题２是关于debian系统的，我们这里可以忽略）
The following are potential configuration items that you may want to fix:

1 : some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.
2 : debmirror package is not installed, it will be required to manage debian deployments and repositories

Restart cobblerd and then run 'cobbler sync' to apply changes.



－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－


第三大步：导入镜像


以下是相关配置路径(默认安装) :

Cobbler 配置主要位置：/var/lib/cobbler/
snippets 代码  位置：/var/lib/cobbler/snippets/
Kickstart 模板  位置 : /var/lib/cobbler/kickstarts/
默认使用的ks文件: /var/lib/cobbler/kickstarts/default.ks
安装源镜像       位置 : /var/www/cobbler/ks_mirror/ 


# ls /var/www/cobbler/ks_mirror/
config


# mount  |grep iso	--将你要导入的安装镜像先挂载到一个目录，我这里为/yum
/share/soft/rhel-server-6.5-x86_64-dvd.iso on /yum type iso9660 (rw,loop=/dev/loop0)


# cobbler import --path=/yum/ --name=rhel-server-6.5-x86_64 --arch=x86_64  --将挂载的镜像目录位置导入到cobbler
task started: 2015-08-15_112805_import
task started (id=Media import, time=Sat Aug 15 11:28:05 2015)
Found a candidate signature: breed=redhat, version=rhel6
Found a matching signature: breed=redhat, version=rhel6
Adding distros from path /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64:
creating new distro: rhel-server-6.5-x86_64
trying symlink: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64 -> /var/www/cobbler/links/rhel-server-6.5-x86_64
creating new profile: rhel-server-6.5-x86_64
associating repos
checking for rsync repo(s)
checking for rhn repo(s)
checking for yum repo(s)
starting descent into /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64 for rhel-server-6.5-x86_64
processing repo at : /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64
need to process repo/comps: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64
looking for /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/repodata
processing repo at : /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ScalableFileSystem
need to process repo/comps: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ScalableFileSystem
looking for /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ScalableFileSystem/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ScalableFileSystem/repodata
processing repo at : /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/LoadBalancer
need to process repo/comps: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/LoadBalancer
looking for /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/LoadBalancer/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/LoadBalancer/repodata
processing repo at : /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/HighAvailability
need to process repo/comps: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/HighAvailability
looking for /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/HighAvailability/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/HighAvailability/repodata
processing repo at : /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ResilientStorage
need to process repo/comps: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ResilientStorage
looking for /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ResilientStorage/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/ResilientStorage/repodata
processing repo at : /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/Server
need to process repo/comps: /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/Server
looking for /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/Server/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/Server/repodata
*** TASK COMPLETE ***


# ls /var/www/cobbler/ks_mirror/	--导入完后，这里会多了刚导入的镜像目录
config  rhel-server-6.5-x86_64


# cobbler distro list		--查看你已经导入的名字
   rhel-server-6.5-x86_64


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－



第四大步：
修改dhcp，让cobbler来管理dhcp，并进行cobbler配置同步


修改/etc/cobbler/dhcp.template，此文件是cobbler管理dhcp的模板（不需要象kickstart那样去修改/etc/dhcp/dhcpd.conf，修改了也没用，它会在后面做cobbler sync时把/etc/cobbler/dhcp.template拷过去覆盖/etc/dhcp/dhcpd.conf文件，并启动dhcp)

只修改下面这一段，改成你自己对应的ＩＰ和网段就可以了(这里宿主机用的vmnet1,IP为1.1.1.1，所以修改后如下）

subnet 1.1.1.0 netmask 255.255.255.0 {
     option routers             1.1.1.1;
     option domain-name-servers 1.1.1.1;
     option subnet-mask         255.255.255.0;
     range dynamic-bootp        1.1.1.100 1.1.1.254;
     default-lease-time         21600;
     max-lease-time             43200;
     next-server                $next_server;
     class "pxeclients" {
          match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
          if option pxe-system-type = 00:02 {
                  filename "ia64/elilo.efi";
          } else if option pxe-system-type = 00:06 {
                  filename "grub/grub-x86.efi";
          } else if option pxe-system-type = 00:07 {
                  filename "grub/grub-x86_64.efi";
          } else {
                  filename "pxelinux.0";
          }
     }

}


# vim /etc/cobbler/settings	--再去修改这个配置文件，改成dhcp服务由cobbler来管理
242 manage_dhcp: 1		--把0改为1

# /etc/init.d/cobblerd restart	--保存后，再重启此服务



# cobbler sync		--同步cobbler配置，并初始化，帮你启动dhcp等
task started: 2015-08-15_113932_sync
task started (id=Sync, time=Sat Aug 15 11:39:32 2015)
running pre-sync triggers
cleaning trees
removing: /var/www/cobbler/images/rhel-server-6.5-x86_64
removing: /var/lib/tftpboot/pxelinux.cfg/default
removing: /var/lib/tftpboot/grub/efidefault
removing: /var/lib/tftpboot/grub/images
removing: /var/lib/tftpboot/images/rhel-server-6.5-x86_64
removing: /var/lib/tftpboot/s390x/profile_list
copying bootloaders
trying hardlink /usr/share/syslinux/pxelinux.0 -> /var/lib/tftpboot/pxelinux.0
copying: /usr/share/syslinux/pxelinux.0 -> /var/lib/tftpboot/pxelinux.0
trying hardlink /usr/share/syslinux/menu.c32 -> /var/lib/tftpboot/menu.c32
trying hardlink /usr/share/syslinux/memdisk -> /var/lib/tftpboot/memdisk
copying distros to tftpboot
copying files for distro: rhel-server-6.5-x86_64
trying hardlink /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/images/pxeboot/vmlinuz -> /var/lib/tftpboot/images/rhel-server-6.5-x86_64/vmlinuz
trying hardlink /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/images/pxeboot/initrd.img -> /var/lib/tftpboot/images/rhel-server-6.5-x86_64/initrd.img
copying images
generating PXE configuration files
generating PXE menu structure
copying files for distro: rhel-server-6.5-x86_64
trying hardlink /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/images/pxeboot/vmlinuz -> /var/www/cobbler/images/rhel-server-6.5-x86_64/vmlinuz
trying hardlink /var/www/cobbler/ks_mirror/rhel-server-6.5-x86_64/images/pxeboot/initrd.img -> /var/www/cobbler/images/rhel-server-6.5-x86_64/initrd.img
Writing template files for rhel-server-6.5-x86_64
rendering DHCP files
generating /etc/dhcp/dhcpd.conf
rendering TFTPD files
generating /etc/xinetd.d/tftp
processing boot_files for distro: rhel-server-6.5-x86_64
cleaning link caches
running post-sync triggers
running python triggers from /var/lib/cobbler/triggers/sync/post/*
running python trigger cobbler.modules.sync_post_restart_services
running: dhcpd -t -q
received on stdout: 
received on stderr: 
running: service dhcpd restart
received on stdout: Shutting down dhcpd: [  OK  ]
Starting dhcpd: [  OK  ]

received on stderr: 
running shell triggers from /var/lib/cobbler/triggers/sync/post/*
running python triggers from /var/lib/cobbler/triggers/change/*
running python trigger cobbler.modules.scm_track
running shell triggers from /var/lib/cobbler/triggers/change/*
*** TASK COMPLETE ***


# /etc/init.d/xinetd restart	--把xinetd服务重启一下




－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

第五大步：

验证：新建一个vmnet1网段（因为我前面配置的是这个网段）的虚拟机，然后启动，会出现cobbler的引导安装界面，选择并自动安装



=================================================================


补充1：
cobbler的web管理


web管理路径 
# /etc/init.d/httpd restart   --先最好重启一下httpd服务
重启时如果报443端口被占用，解决方法:
# /etc/init.d/vmware-workstation-server stop
# chkconfig vmware-workstation-server off



然后通过firefox访问下面的路径
http://IP/cobbler_web		--默认用户名cobbler,密码cobbler


# htdigest /etc/cobbler/users.digest "Cobbler" abc	--增加一个abc用户
Adding user abc in realm Cobbler
New password: 
Re-type new password: 

# cat /etc/cobbler/users.digest 
cobbler:Cobbler:a2d6bae81669d707b72c0bd9806e01f3
abc:Cobbler:de5b9d396aa51c6710e62e555a2986ec



=============================================================


补充二:
关于cobbler使用ks文件的讨论


# cobbler distro list
   rhel-server-6.5-x86_64


设置profile(理解为在服务器端对每一个安装镜像做角色分类，如安装名与ks文件的关联）
distro代表导入的镜像
profile代表安装方案。一个distro可以对应一个或多个profile


# cobbler profile help	--查看帮助
# cobbler profile list	--查看有哪些profile，默认会有一个和先前导入镜像同名的profile
   rhel-server-6.5-x86_64

# cobbler profile report --name rhel-server-6.5-x86_64 |grep "^Kickstart" |head -1	--通过report报告查看名为rhel-server-6.5-x86_64的安装镜像默认使用的ks文件为/var/lib/cobbler/kickstarts/sample_end.ks
Kickstart                      : /var/lib/cobbler/kickstarts/sample_end.ks


# cobbler profile add --name=my_ks1 --distro=rhel-server-6.5-x86_64  --kickstart=/ks/ks.cfg   
--把名为rhel-server-6.5-x86_64的安装镜像再加一个名为my_ks1的安装profile，使用的是/ks/ks.cfg文件（这是上次课讲kickstart时用的，你也可以自己再准备一个都行;但这里并不建议使用kickstart使用的ks文件，如果你要自己自定义，最好是去修改cobbler里的ks模版）


# cobbler profile list		--经过上面的操作，最终我导入的rhel-server-6.5-x86_64镜像拥有两种安装方案（一个是同名的安装方案，使用/var/lib/cobbler/kickstarts/sample_end.ks自动安装文件；一个是刚自己加的安装方案名为my_ks1，使用/ks/ks.cfg自动安装文件）
   my_ks1
   rhel-server-6.5-x86_64

再次使用客户端去安装验证，会出现两种安装方案给你选择


对上面操作的扩展(仅供参考）
# cobbler profile edit --name=my_ks1 --kickstart=/ks/ks2.cfg   --将my_ks1这个profile修改一个新的ks文件
# cobbler profile remove --name=my_ks1	--删除my_ks1这个profile



=================================================================

补充三：
针对ks文件的修改的讨论
上面在补充二时提到，最好不要完全照搬kickstart使用的ks文件（因为你照搬过来后，很多功能和配置和cobbler不好连接）


以上面的名字为rhel-server-6.5-x86_64的profile使用的ks文件/var/lib/cobbler/kickstarts/sample_end.ks为例来实验ks文件的修改

vim /var/lib/cobbler/kickstarts/sample_end.ks
# kickstart template for Fedora 8 and later.
# (includes %end blocks)
# do not use with earlier distros

#platform=x86, AMD64, or Intel EM64T
# System authorization information
auth  --useshadow  --enablemd5
# System bootloader configuration
bootloader --location=mbr
# Partition clearing information
clearpart --all --initlabel
# Use text mode install
text
# Firewall configuration
firewall --enabled
# Run the Setup Agent on first boot
firstboot --disable
# System keyboard
keyboard us
# System language
lang en_US
# Use network installation
url --url=$tree
# If any cobbler repo definitions were referenced in the kickstart profile, include them here.
$yum_repo_stanza
# Network information
$SNIPPET('network_config')
# Reboot after installation
reboot

#Root password
rootpw --iscrypted $default_password_crypted
# SELinux configuration
selinux --disabled
# Do not configure the X Window System
skipx
# System timezone
timezone  America/New_York
# Install OS instead of upgrade
install
# Clear the Master Boot Record
zerombr
# Allow anaconda to partition the system as needed
part /boot --asprimary --fstype="ext4" --size=200
part swap --asprimary --fstype="swap" --size=2000
part / --asprimary --fstype="ext4" --grow --size=1           －－这里是把原来的一句autopart改成自己想要的分区形式（原来是分lvm，现在我定义了三个分区）


%pre
$SNIPPET('log_ks_pre')
$SNIPPET('kickstart_start')
$SNIPPET('pre_install_network_config')
# Enable installation monitoring
$SNIPPET('pre_anamon')
%end

%packages
$SNIPPET('func_install_if_enabled')
%end

%post --nochroot
$SNIPPET('log_ks_post_nochroot')
%end

%post
$SNIPPET('log_ks_post')
# Start yum configuration
$yum_config_stanza
# End yum configuration
$SNIPPET('post_install_kernel_options')
$SNIPPET('post_install_network_config')
$SNIPPET('func_register_if_enabled')
$SNIPPET('download_config_files')
$SNIPPET('koan_environment')
$SNIPPET('redhat_register')
$SNIPPET('cobbler_register')
# Enable post-install boot notification
$SNIPPET('post_anamon')
# Start final steps
$SNIPPET('kickstart_done')
# End final steps
touch /root/123
touch /tmp/123		--在这里又加了两句安装后的脚本，touch了两个文件
%end


保存后，用客户端安装rhel-server-6.5-x86_64来进行测试，最后发现分区和上面修改的一致，并且/root/123和/tmp/123这两个文件也都存在，说明上面的修改成功



--总结：在生产环境，你可以按这种方式把cobbler的ks文件模版，按你的需求改成几种不同的方案，再使用补充2部分里讲的cobbler profile add把这些ks文件和安装镜像对应起来做成不同的profile



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

补充4：
客户端使用koan与服务器的cobbler联系，实现自动重装系统

在客户端安装koan-2.6.9-1.el6.noarch.rpm软件包

# yum install koan-2.6.9-1.el6.noarch.rpm  --因为cobbler可以自动帮你解决yum的配置，所以依赖性可以直接帮你解决


# koan --server=1.1.1.1 --list=profiles	   --1.1.1.1为cobbler服务器IP，得到的结果和在cobbler服务器上cobbler profile list命令得到的结果一样
   my_ks1
   rhel-server-6.5-x86_64


＃ koan --replace-self --server=1.1.1.1 --profile=rhel-server-6.5-x86_64  --指定本客户端按照名为rhel-server-6.5-x86_64的profile重装系统

# reboot  --敲完上面的命令，使用reboot，就会重装了（没敲上面的命令那reboot就是重启）



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝



centroen

centreon是开源的IT监控软件，由法国人于2003年开发，最初名为Oreon，并于2005年正式更名为centreon。

centreon作为nagios的分布式监控管理平台，其功能之强大，打造了centreon在IT监控方面强势地位，
它的底层使用nagios监控软件，nagios通过ndoutil模块将监控数据写入数据库，centreon读取该数据并即时的展现监控信息，
通过centreon可以简单地管理和配置所有nagios，因此，完全可以使用centreon轻易的搭建企业级分布式IT基础运维监控系统



第一步：
直接使用下面的iso安装系统

笔记目录下/ces-standard-3.2-x86_64.iso


安装完后,建议做一个虚拟机快照，方便测试出现问题，恢复快照重新测试


登录系统，把时间同步一下


使用firefox访问
http://IP/


第二步：
按照图示安装

Monitoring engine  选择 centreon-engine

Broker Module  选择 centreon-broker

完成后使用admin和你设定的密码登陆

--过程见笔记里的截图（centreon01.png  --  centreon09.png )




第三步：
点configuration －－》 hosts    --看到默认监控本机（点configuration －－》services能看到监控了本机的8个服务,其中4个为enabled,另外4个为disabled），但是看不到有监控信息(点Monitoring－－services，看不到任何信息）


点Configuration －－》 Monitoring Engines   --按下面的操作

     Generate Configuration Files
     Run monitoring engine debug (-v)   --默认情况这两个前面有打勾，保持这种情况，点下面的export按钮

     Move Export Files
     Restart Monitoring Engine    --把上面默认情况的两个勾去掉，再把这两个选项前面打上勾，再次点export按钮


上面的操作完后，刷新web页面，仍然看不到有监控信息
去服务器上把cbd服务重启，再刷新，就可以了（默认监控本机及其4个服务）
# /etc/init.d/cbd  restart

点Monitoring －－》 Services  －－》  All Services  --可以看到监控状态和图表




例:监控远程

远程监控通过snmp协议来实现


		　centreon监控服务器　　－－　　　被监控客户端
		　　10.1.1.9			10.1.1.8



第一步:
在centreon服务器上操作
# snmpwalk -v 1  -c public 127.0.0.1  --有信息，表示可以监控
# snmpwalk -v 1  -c public 被监控机IP  --没有信息，表示现在不可以监控

第二步:
在被监控机上操作
1，# yum install net-snmp*

2,# vim /etc/snmp/snmpd.conf 

62 access  notConfigGroup ""      any       noauth    exact  systemview none none
改成如下(把systemview改成all)
62 access  notConfigGroup ""      any       noauth    exact  all none none


85 view all    included  .1                               80	--把这句注释打开

# /etc/init.d/snmpd  restart

第三步:
再回到centreon服务器上操作
# snmpwalk -v 1  -c public 被监控机IP --有信息了




第四步:
回到web管理界面

点Configuration －－》 Hosts  －－》点add

Host Name： server8
Alias： server8
IP Address： 10.1.1.8

Template : Servers-Linux

Check Period : 24x7
Check Command: check_host_alive

Max Check Attempts : 3

Linked Contacts *: li teng     --在安装图形界面建立的用户
Linked Contact Groups *: supervisors

Notification Interval *: 60
Notification Period *: workhours
Notification Options: 全打勾，表示所有情况都会通知

不急save，点relations把Linux-Servers加上，再点save


第五步:

点configuration －－》 host    --看到默认监控本机，但是看不到有监控信息

点Configuration －－》 Monitoring Engines   --按下面的操作

     Generate Configuration Files
     Run monitoring engine debug (-v)   --默认情况这两个前面有打勾，保持这种情况，点下面的export按钮

     Move Export Files
     Restart Monitoring Engine    --把上面默认情况的两个勾去掉，再把这两个选项前面打上勾，再次点export按钮


上面的操作完后，刷新web页面，就可以看到两台的监控信息（本机和远程）




＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝



zabbix

# 笔记目录下/zabbix_rhel65		--只能用于rhel6.5(主要是php-bcmath和php-mbstring这两个软件依赖rhel的php-common，我这里的版本只与rhel6.5兼容；如果是其它版本，还需要网上自行找这两个对应版本的软件包，zabbix和rhel官方都不自带）
fping-2.4b2-16.el6.x86_64.rpm         zabbix-get-2.4.6-1.el6.x86_64.rpm
iksemel-1.4-2.el6.x86_64.rpm          zabbix-java-gateway-2.4.6-1.el6.x86_64.rpm
iksemel-devel-1.4-2.el6.x86_64.rpm    zabbix-proxy-2.4.6-1.el6.x86_64.rpm
iksemel-utils-1.4-2.el6.x86_64.rpm    zabbix-proxy-mysql-2.4.6-1.el6.x86_64.rpm
php-bcmath-5.3.3-26.el6.x86_64.rpm    zabbix-sender-2.4.6-1.el6.x86_64.rpm
php-mbstring-5.3.3-26.el6.x86_64.rpm  zabbix-server-2.4.6-1.el6.x86_64.rpm
repodata                              zabbix-server-mysql-2.4.6-1.el6.x86_64.rpm
zabbix-2.4.6-1.el6.x86_64.rpm         zabbix-web-2.4.6-1.el6.noarch.rpm
zabbix-2.4.6.tar.gz                   zabbix-web-mysql-2.4.6-1.el6.noarch.rpm
zabbix-agent-2.4.6-1.el6.x86_64.rpm




找一台做zabbix服务器（宿主机或虚拟机都可以)
第一步:
基本准备
1，主机名
2，时间同步
3，iptables,selinux关闭
4，配置yum

# vim /etc/yum.repos.d/rhel-source.repo		--需要下面两个仓库

[Server]
name=Server
baseurl=file:///yum/Server
enabled=1
gpgcheck=0
[zabbix]
name=zabbix
baseurl=file:///share/20151116/zabbix_rhel65	--把这个路径改成你自己对应的路径就可以了
enabled=1
gpgcheck=0



第二步：
安装软件
# yum install mysql* zabbix-server-mysql zabbix-web-mysql




第三步:
在mysql里建立存放数据的库并授权，然后导入zabbix所需要用的表和数据
# /etc/init.d/mysqld restart
# chkconfig mysqld on
# mysql

mysql> create database zabbix default charset utf8;


mysql> grant all on zabbix.* to zabbix@'localhost' identified by '123';


mysql> flush privileges;

先导入schema
mysql> use zabbix
mysql> source /usr/share/doc/zabbix-server-mysql-2.4.6/create/schema.sql
再导入images
mysql> source /usr/share/doc/zabbix-server-mysql-2.4.6/create/images.sql
最后导入data
mysql> source /usr/share/doc/zabbix-server-mysql-2.4.6/create/data.sql



第四步:
配置zabbix主配置文件，并启动服务
# vim /etc/zabbix/zabbix_server.conf 	--找到并确认如下参数（有注释的打开，并修改对应的值）

13 ListenPort=10051
72 DBHost=localhost
82 DBName=zabbix
98 DBUser=zabbix
106 DBPassword=123
115 DBSocket=/var/lib/mysql/mysql.sock 
288 ListenIP=0.0.0.0


# /etc/init.d/zabbix-server restart
# lsof -i:10051


第五步:
配置zabbix的httpd子配置文件,并启动httpd
# vim /etc/httpd/conf.d/zabbix.conf 	--打开时区注释，并修改成你的时区

18 php_value date.timezone Asia/Shanghai


# /etc/init.d/httpd restart
# chkconfig httpd on

第六步:
然后使用firefox访问，并进行安装
http://IP/zabbix

按照图示过程安装
1,welcome
2,Check of pre-requisites
3,Configure DB connection
数据库用户名填zabbix,密码填123（前面授权过的），并test connection成功
4,Zabbix server details
在name选项填上你zabbix服务器的IP或者主机名
5,Pre-Installation summary
6,install

完成后
登陆用户名为:admin
登陆密码为:zabbix



============================================================================


例一,转换成中文界面
右上角点profile －－》 语言选 中文zh-cn －－》 点 update




例二,监控本机
# yum install zabbix-agent	--监控自已也要安装agent

# vim /etc/zabbix/zabbix_agentd.conf	--下面几个常见选项都为默认值，不用配置
85 Server=127.0.0.1		--zabbix服务器的IP，这里是本机
126 ServerActive=127.0.0.1		--zabbix服务器active check(健康检查）
93 ListenPort=10050		--监控服务器连接被监控客户端的端口(默认是注释的，要打开注释）
137 Hostname=Zabbix server		--设定被监控客户端的名称标识

# /etc/init.d/zabbix-agent restart
# lsof -i:10050
# chkconfig zabbix-agent on


回到web管理界面－－》点组态（英文叫configuration)－－》点主机－－》默认看到叫Zabbix server的本机，但状态是停用的－－》点击并启用

然后可以通过点图形－－》选图后点预览－－》看到图上有乱码



解决方法：
把原来的图形字符换成ukai字体
ukai下载地址为
# wget http://ftp.debian.org/debian/pool/main/t/ttf-arphic-ukai/ttf-arphic-ukai_0.2.20080216.1.orig.tar.gz


# tar xf ttf-arphic-ukai_0.2.20080216.1.orig.tar.gz -C /usr/share/zabbix/fonts/
# mv /usr/share/zabbix/fonts/ukai.ttc /usr/share/zabbix/fonts/ukai.ttf  
# vim /usr/share/zabbix/include/defines.inc.php

44 define('ZBX_GRAPH_FONT_NAME',           'ukai'); --修改原来的graphfont字体改成ukai


做完后，不用重启服务，回到zabbix的web界面刷新查看图形就会发现没有乱码了




例三，监控远程linux

		监控服务器   －－－－－>	被监控客户端
		10.1.1.8		10.1.1.9

在被监控客户端上10.1.1.9安装zabbix-agent

1,关闭iptables,selinux
2,配置yum
3，安装zabbix-agent
# yum install zabbix-agent

# vim /etc/zabbix/zabbix_agentd.conf
85 Server=10.1.1.8		--写上zabbix监控服务器的IP
126 ServerActive=10.1.1.8	--也是写上zabbix监控服务器的IP
137 Hostname=linux_node9	--为你的被监控客户端取一个图形上能看到的名字


# /etc/init.d/zabbix-agent restart
# lsof -i:10050
# chkconfig zabbix-agent on


回到web管理界面－－》点组态－－》点主机 －－》 点创建主机

主机名称: linux_node9  --对应zabbix_agentd.conf里的配置
群组: Linux servers
IP地址: 10.1.1.9

点模版，把 Template OS Linux　前面打勾　－－》点选择 －－》点添加 

